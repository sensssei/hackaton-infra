#!/bin/bash

set -e

echo "üöÄ Starting Smart HelpDesk Infrastructure Setup..."
echo "================================================"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
detect_deployment_mode() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å kubectl –∏ –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞
    if command -v kubectl &> /dev/null && kubectl cluster-info &> /dev/null 2>/dev/null; then
        echo "üéØ Kubernetes cluster detected"
        return 0
    else
        echo "üê≥ Using Docker Compose mode"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå –î–æ–∫–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker Compose
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo "‚ùå Docker Compose –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker Compose."
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç—É
if [ ! -f .env ]; then
    echo "üìù –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ .env.example..."
    cp .env.example .env
    echo "‚ö†Ô∏è  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –≤–∞—à–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏!"
fi

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –µ—Å–ª–∏ .env –ø—É—Å—Ç–æ–π 
if [ ! -s .env ] || grep -q "strong_password_here" .env; then
    echo "üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏..."
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–∞—Ä–æ–ª—å
    POSTGRES_PASSWORD=$(openssl rand -hex 32 2>/dev/null || echo "postgres_secure_123")
    MONGO_ROOT_PASSWORD=$(openssl rand -base64 32 2>/dev/null || echo "mongo_secure_123") 
    REDIS_PASSWORD=$(openssl rand -base64 32 2>/dev/null || echo "redis_secure_123")
    MINIO_ROOT_PASSWORD=$(openssl rand -base64 32 2>/dev/null || echo "minio_secure_123")
    KEYCLOAK_ADMIN_PASSWORD=$(openssl rand -base64 32 2>/dev/null || echo "keycloak_secure_123")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª 
    echo "–û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    cat > .env.tmp << EOF
# PostgreSQL Configuration
POSTGRES_DB=helpdesk
POSTGRES_USER=helpdesk_user
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# MongoDB Configuration
MONGO_ROOT_USERNAME=admin
MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
MONGO_DATABASE=helpdesk

# Redis Configuration
REDIS_PASSWORD=${REDIS_PASSWORD}

# MinIO Configuration
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}

# Keycloak Configuration
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
EOF

    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    mv .env.tmp .env
    echo "‚úÖ –ü–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env"
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
deploy_docker() {
    echo "üê≥ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Docker Compose..."
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    echo "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    mkdir -p config/keycloak config/minio config/postgres

    # –°–æ–∑–¥–∞–µ–º PostgreSQL init —Å–∫—Ä–∏–ø—Ç
    cat > config/postgres/init.sql << EOF
CREATE DATABASE keycloak;
CREATE DATABASE helpdesk;
GRANT ALL PRIVILEGES ON DATABASE keycloak TO helpdesk_user;
GRANT ALL PRIVILEGES ON DATABASE helpdesk TO helpdesk_user;
EOF

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑—ã
    echo "üì• –ó–∞–≥—Ä—É–∂–∞–µ–º Docker images..."
    docker-compose pull

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    echo "üîÑ –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d

    echo "‚è≥ –ñ–¥–µ–º –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å—ã —Å—Ç–∞–Ω—É—Ç healthy..."
    sleep 30

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º service status
    echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose ps

    echo ""
    echo "‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    show_docker_urls
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Kubernetes —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
deploy_kubernetes() {
    echo "‚ò∏Ô∏è  –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Kubernetes..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ kubectl
    if ! command -v kubectl &> /dev/null; then
        echo "‚ùå kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Kubernetes."
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º namespace –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    local namespace="helpdesk-infra"
    if ! kubectl get namespace "$namespace" &> /dev/null; then
        echo "üì¶ –°–æ–∑–¥–∞–µ–º namespace $namespace..."
        kubectl create namespace "$namespace"
    fi
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
    source .env
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
    echo "üîê –°–æ–∑–¥–∞–µ–º Kubernetes secrets..."
    kubectl create secret generic helpdesk-secrets \
      --namespace="$namespace" \
      --from-literal=postgres-password="$POSTGRES_PASSWORD" \
      --from-literal=mongo-password="$MONGO_ROOT_PASSWORD" \
      --from-literal=redis-password="$REDIS_PASSWORD" \
      --from-literal=minio-password="$MINIO_ROOT_PASSWORD" \
      --from-literal=keycloak-password="$KEYCLOAK_ADMIN_PASSWORD" \
      --dry-run=client -o yaml | kubectl apply -f -
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã –ü–û–§–ê–ô–õ–û–í–û 
    echo "üìã –ü—Ä–∏–º–µ–Ω—è–µ–º Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã..."
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
    apply_manifest() {
        local file="$1"
        if [ -f "$file" ]; then
            echo "  üìÑ Applying $file"
            kubectl apply -f "$file" -n "$namespace"
        else
            echo "  ‚ö†Ô∏è  File not found: $file"
        fi
    }
    
    # –ë–∞–∑–æ–≤—ã–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã (–∏–∑ k8s/base/)
    apply_manifest "k8s/base/namespace.yaml"
    
    # PostgreSQL (–∏–∑ k8s/postgres/)
    apply_manifest "k8s/postgres/pvc.yaml"
    apply_manifest "k8s/postgres/configmap.yaml"
    apply_manifest "k8s/postgres/deployment.yaml"
    
    # MongoDB (–∏–∑ k8s/mongodb/)
    apply_manifest "k8s/mongodb/pvc.yaml"
    apply_manifest "k8s/mongodb/deployment.yaml"
    
    # Redis (–∏–∑ k8s/redis/)
    apply_manifest "k8s/redis/pvc.yaml"
    apply_manifest "k8s/redis/deployment.yaml"
    
    # MinIO (–∏–∑ k8s/minio/)
    apply_manifest "k8s/minio/pvc.yaml"
    apply_manifest "k8s/minio/deployment.yaml"
    
    # Keycloak (–∏–∑ k8s/keycloak/)
    apply_manifest "k8s/keycloak/configmap.yaml"
    apply_manifest "k8s/keycloak/deployment.yaml"
    
    echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ –ø–æ–¥–æ–≤..."
    sleep 10  # –î–∞–µ–º –ø–æ–¥–∞–º –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–¥–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    timeout=300
    counter=0
    all_ready=false
    
    while [ $counter -lt $timeout ]; do
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–¥–æ–≤ –≤ namespace
        pods_status=$(kubectl get pods -n "$namespace" -o jsonpath='{range .items[*]}{.metadata.name}={.status.phase}{"\n"}{end}' 2>/dev/null)
        
        if [ -z "$pods_status" ]; then
            echo "‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–æ–≤..."
        else
            running_pods=$(echo "$pods_status" | grep -c "Running" || true)
            total_pods=$(echo "$pods_status" | wc -l)
            failed_pods=$(echo "$pods_status" | grep -c "Failed" || true)
            
            echo "‚è≥ –°—Ç–∞—Ç—É—Å: $running_pods/$total_pods –ø–æ–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∞
            kubectl get pods -n "$namespace" --no-headers 2>/dev/null | while read line; do
                pod_name=$(echo "$line" | awk '{print $1}')
                pod_status=$(echo "$line" | awk '{print $3}')
                echo "  üì¶ $pod_name: $pod_status"
            done
            
            if [ "$failed_pods" -gt 0 ]; then
                echo "‚ùå –ï—Å—Ç—å —É–ø–∞–≤—à–∏–µ –ø–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
                kubectl get pods -n "$namespace" 2>/dev/null | grep Failed || true
                break
            fi
            
            if [ "$running_pods" -eq "$total_pods" ] && [ "$total_pods" -ge 5 ]; then
                echo "‚úÖ –í—Å–µ –ø–æ–¥—ã –≥–æ—Ç–æ–≤—ã!"
                all_ready=true
                break
            fi
        fi
        
        sleep 10
        counter=$((counter + 10))
    done
    
    if [ "$all_ready" = false ]; then
        echo "‚ö†Ô∏è  –ù–µ –≤—Å–µ –ø–æ–¥—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        echo "üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:"
        kubectl get pods -n "$namespace" 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤"
        echo ""
        echo "üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
        echo "   kubectl describe pods -n $namespace"
        echo "   kubectl logs -n $namespace [pod-name]"
    else
        echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!"
    fi
    
    show_k8s_urls "$namespace"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ URLs –¥–ª—è Docker
show_docker_urls() {
    echo ""
    echo "üìä –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞:"
    echo "   PostgreSQL:      localhost:5432"
    echo "   MongoDB:         localhost:27017" 
    echo "   Redis:           localhost:6379"
    echo "   MinIO:           localhost:9000 (API), localhost:9001 (Console)"
    echo "   Keycloak:        localhost:8080"
    echo ""
    echo "üîë Keycloak Admin: http://localhost:8080/admin"
    echo "üì¶ MinIO Console:  http://localhost:9001"
    echo ""
    echo "üõë –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: docker-compose down"
    echo "üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏:    docker-compose logs -f"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ URLs –¥–ª—è Kubernetes
show_k8s_urls() {
    local namespace="$1"
    echo ""
    echo "üìä –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ namespace: $namespace"
    echo ""
    echo "üîç –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ port-forward:"
    echo "   kubectl port-forward -n $namespace service/postgres 5432:5432 &"
    echo "   kubectl port-forward -n $namespace service/mongodb 27017:27017 &"
    echo "   kubectl port-forward -n $namespace service/redis 6379:6379 &"
    echo "   kubectl port-forward -n $namespace service/minio 9000:9000 9001:9001 &"
    echo "   kubectl port-forward -n $namespace service/keycloak 8080:8080 &"
    echo ""
    echo "üìã –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "   –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–æ–≤:    kubectl get pods -n $namespace"
    echo "   –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–≤–∏—Å–æ–≤: kubectl get svc -n $namespace"
    echo "   –õ–æ–≥–∏:              kubectl logs -n $namespace [pod-name]"
    echo ""
    echo "üõë –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:     kubectl delete namespace $namespace"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    if detect_deployment_mode; then
        read -p "üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Kubernetes –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è? [y/N]: " use_k8s
        if [[ $use_k8s =~ ^[Yy]$ ]]; then
            deploy_kubernetes
        else
            deploy_docker
        fi
    else
        deploy_docker
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main